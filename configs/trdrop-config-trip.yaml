# Configuration file for trdrop

# If the application terminates with the error "...abort()..."
# then the formatting of the yaml-file is probably invalid.
# Check if every "level" is aligned with 4 spaces per level
# e.g:
# test:
#    x:
#    y:


########################################
# GENERAL Configuration

# input files path
input-files:
  - Sample 1 1080p FPS Drop Zelda Wii U.avi
  - Sample 3 1080p Tearing Watch Dogs 2 PS4.avi
  - 4K UHD Arkham Asylum PS4 Pro 01.avi

# output file name (currently only name supported, not a path)
# watch out for the extention, because opencv does not like some codecs with some containers (just use .avi)
output-file: trdrop-triple-output.avi

# if you trigger this option, trdrop will drop the raw frames as bmp into the starting directory. They should be importable
# with every major video editing program
# true / false
output-as-bmps: false

# Experimental feature - this may change in the future
# We export only the overlay, this works with the flag 'output-as-pngs'
activate-overlay: false

# The codec which used to export the video
# 
# OpenCV is a little bit picky when it comes to codecs, especially if you're on Windows and want to modify the resulting video in After Effects
# You need to specify a fourcc name of the codec (listed here http://www.fourcc.org/codecs.php), which always has four letters e.g X264
#
# If you specify the empty string "" as the codec, OpenCV **might** open a dialog after every start, where you can see all of your installed codecs
# and can pick one. It's also possible that OpenCV just crashes and you have to supply it with a real codec.
#
# Things you should be aware of:
#   * not every container (.avi) works with every codec
#   * After Effects only accepts a special kind of .mp4 container, everything else is possibly not supported
#   * if you specify a codec that you didn't install, everything crashes
#   * even if you used the correct name of the codec and installed it, opencv might not find it and crash
#   * this is mostly a trial and error method for each Windows installation
#   * if the parsing of the fourcc string doesn't succeed, the fallback is the "hopefully-open-dialog" solution
#
# Codecs that work:
#   * X264 + .avi
#   * DIVX + .avi
#   * TODO
#
codec: "DIVX"
# codec: ""   # <- popup


# log file name (the name gets splitted on the dot and the corresponding filename is inserted e.g log-my-video-filename.csv)
log-file:    log.csv

# Pixel Difference Margin 
# min: 0 - means that any changes in the color of two pixels means "different"
# max: 765 - means that every possible change of color means "same"
#
# if the pixel difference is 0, then the computation is ~ 30 times faster
# but games like watchdogs will be falsly calculated because of the frame "afterglow"
# a sane choice for this would be ~ 5
pixel-difference: 7

# Line Difference Margin
# min: 0%   - every blank line will count as tear
# max: 100% - the whole frame should be blank to count as tear
#
# How many % of the frame should be blank so it counts as tear
line-difference: 0.6

# Tear color
tear-color:
    first-video:
        hex: "#aa2222"
    second-video:
        hex: "#aa2222"
    third-video:
        hex: "#aa2222"

# defines the color of the text field and the plot color ("" are needed because # is a comment in yaml)
colors:
    first-video:
        hex: "#99ffff"
    second-video:
        hex: "#e7c3e0"
    third-video:
        hex: "#733d58"

# create a shadow behind the text for improved visibility
fps-shadow: true

# the color of the shadow
fps-shadow-colors:
    first-video:
        hex: "#ff9999"
    second-video:
        hex: "#585ab6"
    third-video:
        hex: "#333d58"

########################################
# FPS CALCULATION Configuration

# fps text location in px, starting from the left top (always relative to the referenced video)
#
#  (0,0) --------------- (max-x, 0)
#    |                         |
#    |                         |
#  (max-y, 0) ---------- (max-x, max-y)
fps-text-locations:
    # x: 50, y: 50 for single video
    # x: 500, y: 50 for double video
    first-video:
        x: 50
        y: 50
    second-video:
        x: 690
        y: 50
    third-video:
        x: 1330
        y: 50

# text which is placed before the number (currently always white)
fps-text:
    first-video:
        text: "PS4: "
    second-video:
        text: "Wii U: "
    third-video:
        text: "PC: "

# fps text precision (e.g 2 ~ 0.00, 4 ~ 0.0000)
fps-precision: 1

# update fps-text every X frames
# min-bound: 1
# max-bound: max-frames-count
fps-refresh-rate:
    first-video:
        rate: 20
    second-video:
        rate: 20
    third-video:
        rate: 20

########################################
# Plot Configuration

# Background color
plot-background-color: "#000000"

# Color of the x and y axes
plot-axes-color: "#444444"

# Color of the separation lines at 10, 20, 30, 40 and 50
plot-lines-color: "#444444"

# Plot background transparency (range: 0.0 - 1.0)
# 0.0 ~ transparent
# 1.0 ~ non-transparent
plot-background-alpha: 0.4


########################################
# VIEWER Configuration

# do you want to view the resulting video while processing? (true/false)
viewer-active: true

# how big is the viewer window
viewer-size:
    viewer-width:  960
    viewer-height: 540


########################################
# WRITER Configuration

# how big is the writer size
writer-size:
    writer-width:  1920
    writer-height: 1080